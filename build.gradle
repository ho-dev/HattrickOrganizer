import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'application'
    id 'de.jansauer.poeditor' version '1.0.0'
    id 'org.kordamp.gradle.markdown' version '2.2.0'
    id "com.github.breadmoirai.github-release" version "2.2.10"
    id 'com.install4j.gradle' version '8.0.7'
}

repositories {
    jcenter()
    maven {url 'https://maven.ej-technologies.com/repository'}
//    maven {url 'https://oss.sonatype.org/content/repositories/snapshots/'}
}

dependencies {
    implementation 'com.install4j:install4j-runtime:8.0.7'
    implementation 'com.github.scribejava:scribejava-core:8.1.0'
    implementation 'org.hsqldb:hsqldb:2.4.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp-tls:4.9.0'
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0"
    implementation 'com.github.weisj:darklaf-core:2.6.1'               //'darklaf-core:latest.integration'
    implementation 'com.github.weisj:darklaf-theme:2.6.1'              //'darklaf-theme:latest.integration'
    implementation 'com.github.weisj:darklaf-property-loader:2.6.1'    //darklaf-property-loader:latest.integration'
    implementation 'org.javatuples:javatuples:1.2'
    implementation 'org.apache.commons:commons-text:1.8'
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation 'org.knowm.xchart:xchart:3.6.5'
    compile 'org.junit.jupiter:junit-jupiter:5.6.2'
}

test {
    useJUnitPlatform()
}


//  Version ============================================================
// Development_stage (DEV:0  BETA:1  STABLE:2)
def major = '5'
def minor = '0'
def development_stage = System.getenv("DEV_STAGE") ?:'0'
def releaseArtefacts = true

// region configuration ==============================================================================================
println "Configuration start"

ext {
    target_dir = "${buildDir}/artefacts"
}

// Define build number =================
def versionPropsFile = file('version.properties')
Properties versionProps = new Properties()
versionProps.load(new FileInputStream(versionPropsFile))
def buildNumber = (versionProps['buildNumber'] as Integer) + 1
buildNumber =  buildNumber.toString()
versionProps['buildNumber'] = buildNumber
versionProps.store(versionPropsFile.newWriter(), null)

project.version = major + '.' + minor + '.' + buildNumber + '.' + development_stage

println "Project:  $project.name $project.version ....................."

//  configure application plugin --------------------------------
application {
    mainClassName = 'core.HOLauncher'
}

//  configure java plugin --------------------------------
java {
    compileJava.options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
//    modularity.inferModulePath.set(true)
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

// Returns the build version numbrt
// This is required by the Automated build, in this format:
//      version=<version_number>
task printVersion() {
     print "version=${project.version}"
}

//  configure markdownToHtml --------------------------------
markdownToHtml {
    markdownToHtml.tables = true  // Configuration
}

// Configure poeditor plugin ================================
poeditor {
    apiKey = POEDITOR_APIKEY
    projectId = '206221'

    trans type:'properties', lang: 'bg',      file: 'src\\main\\resources\\sprache\\Bulgarian.properties'
    trans type:'properties', lang: 'ca',      file: 'src\\main\\resources\\sprache\\Catalan.properties'
    trans type:'properties', lang: 'hr',      file: 'src\\main\\resources\\sprache\\Hrvatski(Croatian).properties'
    trans type:'properties', lang: 'cs',      file: 'src\\main\\resources\\sprache\\Czech.properties'
    trans type:'properties', lang: 'da',      file: 'src\\main\\resources\\sprache\\Danish.properties'
    trans type:'properties', lang: 'nl',      file: 'src\\main\\resources\\sprache\\Nederlands.properties'
    trans type:'properties', lang: 'fi',      file: 'src\\main\\resources\\sprache\\Finnish.properties'
    trans type:'properties', lang: 'fr',      file: 'src\\main\\resources\\sprache\\French.properties'
    trans type:'properties', lang: 'de',      file: 'src\\main\\resources\\sprache\\Deutsch.properties'
    trans type:'properties', lang: 'el',      file: 'src\\main\\resources\\sprache\\Greeklish.properties'
    trans type:'properties', lang: 'he',      file: 'src\\main\\resources\\sprache\\Hebrew.properties' //Hebrew
    trans type:'properties', lang: 'hu',      file: 'src\\main\\resources\\sprache\\Magyar.properties'  //Hungarian
    trans type:'properties', lang: 'it',      file: 'src\\main\\resources\\sprache\\Italiano.properties'
    trans type:'properties', lang: 'ko',      file: 'src\\main\\resources\\sprache\\Hangul(Korean).properties'
    trans type:'properties', lang: 'lv',      file: 'src\\main\\resources\\sprache\\Latvija.properties' //Lettonie
    trans type:'properties', lang: 'lt',      file: 'src\\main\\resources\\sprache\\Lithuanian.properties'
    trans type:'properties', lang: 'fa',      file: 'src\\main\\resources\\sprache\\Persian.properties'
    trans type:'properties', lang: 'pl',      file: 'src\\main\\resources\\sprache\\Polish.properties'
    trans type:'properties', lang: 'pt',      file: 'src\\main\\resources\\sprache\\Portugues.properties'
    trans type:'properties', lang: 'pt-br',   file: 'src\\main\\resources\\sprache\\PortuguesBrasil.properties'
    trans type:'properties', lang: 'ro',      file: 'src\\main\\resources\\sprache\\Romanian.properties'
    trans type:'properties', lang: 'ru',      file: 'src\\main\\resources\\sprache\\Russian.properties'
    trans type:'properties', lang: 'sr-cyrl', file: 'src\\main\\resources\\sprache\\Serbian(Cyrillic).properties'
    trans type:'properties', lang: 'sk',      file: 'src\\main\\resources\\sprache\\Slovak.properties' //Slovak
    trans type:'properties', lang: 'es',      file: 'src\\main\\resources\\sprache\\Spanish.properties'
    trans type:'properties', lang: 'sv',      file: 'src\\main\\resources\\sprache\\Svenska.properties' //Swedish
    trans type:'properties', lang: 'tr',      file: 'src\\main\\resources\\sprache\\Turkish.properties'
}


// Configure jar task ================================
jar {
    archiveFileName = "HO.jar"
    manifest {
        attributes 'Manifest-Version': 1.0, 'Implementation-Title': 'HO', 'Implementation-Version': project.version,
                   'Main-Class': 'core.HOLauncher',
                    "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
    }
    exclude "/*.jar", "/*.ico", "/*.png", "/*.md", "/*.html"
}

// Configure distribution task =======================
distributions {
    main {
        distributionBaseName = 'XXX'
    }
}


install4j {
    if (install4jHomeDir != null && install4jHomeDir != "") installDir = file(install4jHomeDir)
    else installDir = file(System.getenv('INSTALL4J_HOME'))
    disableSigning = true
    license = System.getenv('INSTALL4J_LICENSE')
}

// endregion ======================================================================================================================


// region my tasks ================================================================================================

task makeAllmedias(dependsOn: 'media') {
    doLast {
        delete "${projectDir}/build/artefacts/output.txt"
    }
}


task media(type: com.install4j.gradle.Install4jTask) {
    group 'sub tasks'
    dependsOn 'updatebuildreferences'
    projectFile = "${projectDir}/utils/buildResources/HO.install4j"

    // 60 -> Windows Setup
    // 1203  -> Windows Setup (32 bits)
    // 485 -> Windows JRE
    // 1206 -> Windows JRE (32 bits)

    // 64 -> Windows archive
    // 481 -> Windows archive JRE
    // 1208 -> Windows archive (32bits)
    // 1211 -> Windows archive JRE (32bits)

    // 172 -> macOS Single Bundle
    // 473 -> macOS Single Bundle JRE

    // 173 -> Unix Archive
    // 477 -> Unix Archive JRE

    // 1062 -> Unix installer
    // 1064 -> Unix installer JRE

    // 62  -> Linux rpm
    // 63 -> Linux deb
    // 464  -> Linux rpm JRE
    // 471 -> Linux deb JRE

    buildIds = [60, 485, 64, 481, 172, 473, 173, 477, 1062, 1064, 1203, 1206, 1208, 1211]
    String versionType

    switch(development_stage) {
        case '0':
            versionType = "-DEV"
            break;
        case '1':
            versionType = "-BETA"
            break;
        default:
            versionType = ""
            break;
    }

    variables = [HO_version: project.version, projectDir: projectDir, versionType: versionType]
}

task preparingBuild(dependsOn: clean) {
    group 'sub tasks'
    if (releaseArtefacts) {
        doLast {
            //     Deleting build project     ---------------------------------------------------------------------
            println("Deleting build and execution files ....")
            project.delete(files("${projectDir}/db"))
            project.delete(files("${projectDir}/logs"))
            project.delete(files("${projectDir}/themes"))
            project.delete(files("${projectDir}/user.xml"))
            //     Creating Target directory ...  ---------------------------------------------------------------------
            mkdir project.ext.target_dir
        }
    }
}

task pushmd(dependsOn: preparingBuild)  {
    group 'sub tasks'
    doLast {
        copy {
            from "${projectDir}\\src\\main\\resources\\changelog.md"
            into "${projectDir}\\docs\\changelog\\md"
        }
    }
}

task CreateDistribution (dependsOn: installDist) {
    group 'sub tasks'
    outputs.upToDateWhen { false }
    def distribDir = file("${buildDir}/install/XXX")
    doLast {

        copy {
            from "${projectDir}\\docs\\changelog\\html\\changelog.html"
            into "${projectDir}/utils/buildResources"
        }

        if (development_stage == '0') {
            copy {
                from "${projectDir}/utils/buildResources/Logo_dev.png"
                into "${projectDir}/utils/buildResources"
                rename "Logo_dev.png", "Logo.png"
            }
        }
        else if (development_stage == '1') {
            copy {
                from "${projectDir}/utils/buildResources/Logo_beta.png"
                into "${projectDir}/utils/buildResources"
                rename "Logo_beta.png", "Logo.png"
            }
        }
        else {
            copy {
                from "${projectDir}/utils/buildResources/Logo_stable.png"
                into distribDir
                rename "Logo_stable.png", "Logo.png"
            }
        }

        copy {
            from "${projectDir}\\src\\main\\resources\\prediction"
            into "${distribDir}\\prediction"
        }

        copy {
            from "${distribDir}/lib"
            include "**/*.jar"
            into "${distribDir}"
        }

        copy {
            from "${projectDir}\\docs\\changelog\\html\\changelog.html"
            into "${distribDir}"
        }

        copy {
            from "${projectDir}\\src\\main\\resources\\truststore.jks"
            into "${distribDir}"
        }

        delete "${distribDir}\\bin"
        delete "${distribDir}\\lib"

    }
}

task ZipDistribution(dependsOn: 'CreateDistribution', type:Zip) {
    group 'sub tasks'
    archiveFileName  = "HO_${project.version}.zip"
    destinationDirectory  = file("${project.ext.target_dir}")
    from ("${buildDir}/install/${project.version}") {exclude("**\\ho.sh", "**\\HO.bat")}
    from ("${buildDir}/install/${project.version}") {
        include("**\\ho.sh")
        fileMode=0755 }
    doLast {
        println("zipped folder has been created")
    }
}

task updatebuildreferences(dependsOn: CreateDistribution){
    doLast {
        if (releaseArtefacts) {
            println("artefacts have to be uploaded or it will break update process !!!")

            // always update latest.html
            new File("$projectDir/docs/latest.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
            println("latest.html has been updated")

            copy {
                from "${projectDir}\\src\\main\\resources\\release_notes.md"
                into "$projectDir/docs/release_notes"
                rename { filename -> filename.replace('release_notes', 'release_notes(dev)')}
            }
            println("release notes of DEV version have been updated")

            // update latestbeta.html if beta or stable has been released
            if (development_stage != '0') {
                new File("$projectDir/docs/latestbeta.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
                println("latestbeta.html has been updated")
                copy {
                    from "${projectDir}\\src\\main\\resources\\release_notes.md"
                    into "$projectDir/docs/release_notes"
                    rename { filename -> filename.replace('release_notes', 'release_notes(beta)')}
                }
                println("release notes of BETA version have been updated")

            }

            // update lateststable.html only if stable has been released
            if (development_stage == '2') {
                new File("$projectDir/docs/lateststable.html").text = """version=$version
released=${new SimpleDateFormat("dd.MM.yyyy").format(new Date())}
"""
                println("lateststable.html has been updated")
                copy {
                    from "${projectDir}\\src\\main\\resources\\release_notes.md"
                    into "$projectDir/docs/release_notes"
                    rename { filename -> filename.replace('release_notes', 'release_notes(stable)')}
                }
                println("release notes of STABLE version have been updated")
            }
        }
        else{
            println("html files have not been updated : artefacts should not been released, !!")
        }
    }
}

task createLanguageFileList(dependsOn: poeditorPull)  {
    group 'sub tasks'
    outputs.upToDateWhen { false }

    def lTranslationFiles = []
    fileTree(dir: "${projectDir}\\src\\main\\resources\\sprache", include: '*.properties').visit {
        FileVisitDetails details -> lTranslationFiles << details.file.name
    }

    doLast {
        println("listing available translation ")
        lTranslationFiles = lTranslationFiles.collect { it.take(it.lastIndexOf('.'))}
        File lstFile = new File("${projectDir}\\src\\main\\resources\\sprache\\ListLanguages.txt")
        lstFile.withWriter{ out -> lTranslationFiles.each {out.println it} }
    }

}


task resetDB {
    group 'tool'
    description 'copy the database from existing install into project'

    try {
	    doLast {
            println("Resetting DB: copying DB from `${resetDir}` into  ${projectDir}")
            copy {
                from resetDir
                into "${projectDir}/"
                exclude "**/logs/**"
            }

            println("Resetting DB: done !")
        }

    } catch (java.lang.Exception e) {
    	println("Resetting DB: CANNOT copy DB from `${resetDir}` into  ${projectDir}"); return false;
    }
}

poeditorPull {
    outputs.upToDateWhen { false }
}

markdownToHtml {
    sourceDir = new File("${projectDir}/docs/changelog/md")
    outputDir = new File("${projectDir}/docs/changelog/html")
    markdownToHtml.hardwraps = true
}



task releaseDEVtoGitHub() {
    def _token = GITHUB_TOKEN  // required token for your personal access with repo permissions
    doLast {
        githubRelease {
            owner = 'akasolace'
            repo = 'HO'
            releaseAssets = file("$target_dir").listFiles()
            token = _token
            tagName = "dev"
            releaseName = "dev"
            targetCommitish = "master"
            body = "Latest development version aimed at developers"
            prerelease = true
            overwrite = true
        }
        println "DEVELOPMENT version is being released on GitHub"
    }
}

task releaseBETAtoGitHub() {
    def _token = GITHUB_TOKEN  // required token for your personal access with repo permissions
    doLast {
        githubRelease {
            owner = 'akasolace'
            repo = 'HO'
            releaseAssets = file("$target_dir").listFiles()
            token = _token
            tagName = "beta"
            releaseName = "beta"
            targetCommitish = "master"
            body = "Latest beta release"
            prerelease = true
            overwrite = true
        }
        println "BETA version is being released on GitHub"
    }
}

task releaseSTABLEtoGitHub() {
    def _token = GITHUB_TOKEN  // required token for your personal access with repo permissions
    doLast {
        githubRelease {
            owner = 'akasolace'
            repo = 'HO'
            releaseAssets = file("$target_dir").listFiles()
            token = _token
            tagName = "tag_stable"
            releaseName = "stable"
            targetCommitish = "master"
            body = "Latest stable release"
            prerelease = true
            overwrite = true
        }
        println "BETA version is being released on GitHub, release XX.XX should still be created manually"
    }
}


releaseDEVtoGitHub.finalizedBy(tasks.getByName('githubRelease'))
releaseBETAtoGitHub.finalizedBy(tasks.getByName('githubRelease'))
releaseSTABLEtoGitHub.finalizedBy(tasks.getByName('githubRelease'))
releaseBETAtoGitHub.dependsOn releaseDEVtoGitHub
releaseSTABLEtoGitHub.dependsOn releaseBETAtoGitHub

task releaseToGitHub {
    group 'ho'
    if (releaseArtefacts) {
        if (development_stage == '0') {
            dependsOn 'releaseDEVtoGitHub'
        } else if (development_stage == '1') {
            dependsOn 'releaseBETAtoGitHub'
        } else {
            dependsOn 'releaseSTABLEtoGitHub'
        }
    }
}

compileJava.dependsOn preparingBuild
installDist.dependsOn createLanguageFileList
poeditorPull.dependsOn markdownToHtml
markdownToHtml.dependsOn pushmd


poeditorPull.onlyIf {
    project.hasProperty('POEDITOR_APIKEY') && project.ext.properties.POEDITOR_APIKEY!=''
}

// endregion ======================================================================================================================
